/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef remotecommand_TYPES_H
#define remotecommand_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>


#include <stdint.h>
#include <inttypes.h>

namespace RemoteCommand {

struct Operation {
  enum type {
    EXECUTEBIN = 0,
    EXECUTESCRIPT = 1
  };
};

extern const std::map<int, const char*> _Operation_VALUES_TO_NAMES;

typedef struct _BadOperation__isset {
  _BadOperation__isset() : what(false), reason(false) {}
  bool what;
  bool reason;
} _BadOperation__isset;

class BadOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "96705E9A3FD7B072319C71653E0DBB90";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

  BadOperation() : what(0), reason("") {
  }

  virtual ~BadOperation() throw() {}

  int32_t what;
  std::string reason;

  _BadOperation__isset __isset;

  void __set_what(const int32_t val) {
    what = val;
  }

  void __set_reason(const std::string& val) {
    reason = val;
    __isset.reason = true;
  }

  bool operator == (const BadOperation & rhs) const
  {
    if (!(what == rhs.what))
      return false;
    if (__isset.reason != rhs.__isset.reason)
      return false;
    else if (__isset.reason && !(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const BadOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BadOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Command__isset {
  _Command__isset() : op(false), commandFile(false), isBinary(false), parameters(false), stdErrorFile(false), stdOutFile(false), daemonize(false) {}
  bool op;
  bool commandFile;
  bool isBinary;
  bool parameters;
  bool stdErrorFile;
  bool stdOutFile;
  bool daemonize;
} _Command__isset;

class Command {
 public:

  static const char* ascii_fingerprint; // = "6B417694B733691D9995A4D7E02384BB";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x41,0x76,0x94,0xB7,0x33,0x69,0x1D,0x99,0x95,0xA4,0xD7,0xE0,0x23,0x84,0xBB};

  Command() : op((Operation::type)0), commandFile(""), isBinary(0), stdErrorFile(""), stdOutFile(""), daemonize(0) {
  }

  virtual ~Command() throw() {}

  Operation::type op;
  std::string commandFile;
  bool isBinary;
  std::vector<std::string>  parameters;
  std::string stdErrorFile;
  std::string stdOutFile;
  bool daemonize;

  _Command__isset __isset;

  void __set_op(const Operation::type val) {
    op = val;
  }

  void __set_commandFile(const std::string& val) {
    commandFile = val;
  }

  void __set_isBinary(const bool val) {
    isBinary = val;
  }

  void __set_parameters(const std::vector<std::string> & val) {
    parameters = val;
  }

  void __set_stdErrorFile(const std::string& val) {
    stdErrorFile = val;
  }

  void __set_stdOutFile(const std::string& val) {
    stdOutFile = val;
  }

  void __set_daemonize(const bool val) {
    daemonize = val;
  }

  bool operator == (const Command & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    if (!(commandFile == rhs.commandFile))
      return false;
    if (!(isBinary == rhs.isBinary))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    if (!(stdErrorFile == rhs.stdErrorFile))
      return false;
    if (!(stdOutFile == rhs.stdOutFile))
      return false;
    if (!(daemonize == rhs.daemonize))
      return false;
    return true;
  }
  bool operator != (const Command &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Command & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
