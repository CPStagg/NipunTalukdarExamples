// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <fcntl.h>
#include <string>
#include <iostream>
#include "FileService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using std::string;
using std::cout;
using std::endl;

using boost::shared_ptr;

using namespace  ::FileHandler;

class FileServiceHandler : virtual public FileServiceIf {
public:
FileServiceHandler() {
}

int32_t createFile(const Work& w) {
    BadOperation  badop;
    if (w.op != Operation::CREATE && w.op != Operation::DELETE) {
        badop.what = 1;
        badop.reason = "Only create or operation for this API";
        throw badop;
    }
    string filename = w.rootdir;
    filename  += "/";
    filename  += w.filename; 
    switch (w.op) {
        case Operation::CREATE:
        {
            int fd = open(filename.c_str(), O_RDWR | O_CREAT , 0644);
            if (fd < 0) {
                  cout << "Couldn't create the file\n";
                  return -1;
            }
            write(fd, w.data.c_str(), w.data.size());
            close(fd);
            return 0;
        }
        break;

        case Operation::DELETE:
        {
              return unlink(filename.c_str());
        }
        break;
        default:
            break;

    }
    return 0;
}

void getFiles(std::vector<std::string> & _return, const Work& w) {
    cout <<"getFiles... not implemented yet\n";
}

};

int main(int argc, char **argv) {
    int port = 9090;
    shared_ptr<FileServiceHandler> handler(new FileServiceHandler());
    shared_ptr<TProcessor> processor(new FileServiceProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

